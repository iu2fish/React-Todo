/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "./min/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	
	// import utils from './todo-es/Utils.js'

	// var Utils = new utils();
	// var test = Utils.uuid();
	// console.log("uuid:"+test);

	'use strict';

	__webpack_require__(1);

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	
	// app.jsx 文件

	'use strict';

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	// require('./todoItem.js');

	// require('./footer.js');
	// require('./todoModel.js');

	var _footerES6Js = __webpack_require__(2);

	var _footerES6Js2 = _interopRequireDefault(_footerES6Js);

	var _todoItemES6Js = __webpack_require__(4);

	var _todoItemES6Js2 = _interopRequireDefault(_todoItemES6Js);

	var _todoModelES6Js = __webpack_require__(5);

	var _todoModelES6Js2 = _interopRequireDefault(_todoModelES6Js);

	var TodoModels = new _todoModelES6Js2['default']();
	var TodoModel = TodoModels.TodoModel;
	var app = app || {};

	app.ALL_TODOS = 'all';
	app.ACTIVE_TODOS = 'active';
	app.COMPLETED_TODOS = 'completed';

	var ENTRY_KEY = 13;

	var TodoApp = React.createClass({
	  displayName: 'TodoApp',

	  getInitialState: function getInitialState() {
	    return {
	      nowShowing: app.ALL_TODOS,
	      editing: null
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    var setState = this.setState;
	    var router = Router({
	      '/': setState.bind(this, { nowShowing: app.ALL_TODOS }),
	      '/active': setState.bind(this, { nowShowing: app.ACTIVE_TODOS }),
	      '/completed': setState.bind(this, { nowShowing: app.COMPLETED_TODOS })
	    });
	    router.init('/');
	  },

	  handleNewTodoKeyDown: function handleNewTodoKeyDown(event) {
	    if (event.keyCode !== ENTRY_KEY) {
	      return;
	    }

	    event.preventDefault();
	    var val = React.findDOMNode(this.refs.newField).value.trim();
	    if (val) {
	      TodoModels.addTodo(val);
	      React.findDOMNode(this.refs.newField).value = '';
	    }
	  },

	  toggleAll: function toggleAll(event) {
	    var checked = event.target.checked;
	    this.props.model.toggleAll(checked);
	  },

	  toggle: function toggle(todoToToggle) {
	    this.props.model.toggle(todoToToggle);
	  },
	  destroy: function destroy(todo) {
	    this.props.model.destroy(todo);
	  },
	  edit: function edit(todo) {
	    this.setState({ editing: todo.id });
	  },
	  save: function save(totoToSave, text) {
	    this.props.model.save(todoToSavem, text);
	    this.setState({ editing: null });
	  },
	  cancel: function cancel() {
	    this.setState({ editing: null });
	  },
	  clearCompleted: function clearCompleted() {
	    this.props.model.clearCompleted();
	  },
	  render: function render() {
	    var footer;
	    var main;
	    var todos = this.props.model.todos;

	    var shownTodos = todos.filter(function (todo) {
	      switch (this.state.nowShowing) {
	        case app.ACTIVE_TODOS:
	          return !todo.completed;
	        // break;
	        case app.COMPLETED_TODOS:
	          return todo.completed;
	        // break;
	        default:
	          return true;
	      }
	    }, this);

	    var todoItems = shownTodos.map(function (todo) {
	      return React.createElement(_todoItemES6Js2['default'], {
	        key: todo.id,
	        todo: todo,
	        onToggle: this.toggle.bind(this, todo),
	        onDestroy: this.destroy.bind(this, todo),
	        onEdit: this.edit.bind(this, todo),
	        editing: this.state.editing === todo.id,
	        onSave: this.save.bind(this, todo),
	        onCancel: this.cancel
	      });
	    }, this);

	    var activeTodoCount = todos.reduce(function (accum, todo) {
	      return todo.completed ? accum : accum + 1;
	    }, 0);

	    var completedCount = todos.length - activeTodoCount;

	    if (activeTodoCount || completedCount) {
	      footer = React.createElement(_footerES6Js2['default'], {
	        count: activeTodoCount,
	        completedCount: completedCount,
	        nowShowing: this.state.nowShowing,
	        onClearCompleted: this.clearCompleted
	      });
	    }

	    if (todos.length) {
	      main = React.createElement(
	        'section',
	        { id: 'main' },
	        React.createElement('input', {
	          id: 'toggle-all',
	          type: 'checkbox',
	          onChange: this.toggleAll,
	          checked: activeTodoCount === 0
	        }),
	        React.createElement(
	          'ul',
	          { id: 'todo-list' },
	          todoItems
	        )
	      );
	    }

	    return React.createElement(
	      'div',
	      null,
	      React.createElement(
	        'header',
	        { id: 'header' },
	        React.createElement(
	          'h1',
	          null,
	          'todos'
	        ),
	        React.createElement('input', {
	          ref: 'newField',
	          id: 'new-todo',
	          placeholder: 'What needs to be done?',
	          onKeyDown: this.handleNewTodoKeyDown,
	          autoFocus: true
	        })
	      ),
	      main,
	      footer
	    );
	  }
	});

	var model = new TodoModel('react-todos');
	function render() {
	  React.render(React.createElement(TodoApp, { model: model }), document.getElementById('todoapp'));
	}
	TodoModels.subscribe(render);
	render();

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

	var _UtilsJs = __webpack_require__(3);

	var _UtilsJs2 = _interopRequireDefault(_UtilsJs);

	var Utils = new _UtilsJs2['default']();

	var app = app || {};

	var TodoFooter = (function (_React$Component) {
	  function TodoFooter() {
	    _classCallCheck(this, TodoFooter);

	    _get(Object.getPrototypeOf(TodoFooter.prototype), 'constructor', this).apply(this, arguments);
	  }

	  _inherits(TodoFooter, _React$Component);

	  _createClass(TodoFooter, [{
	    key: 'render',
	    value: function render() {
	      var activeTodoWord = Utils.pluralize(this.props.count, 'item');
	      var clearButton = null;

	      if (this.props.completed) {
	        clearButton = React.createElement(
	          'button',
	          {
	            id: 'clear-completed',
	            onClick: this.props.onClearCompleted },
	          'Clear Completed'
	        );
	      }

	      var cx = React.addons.classSet;
	      var nowShowing = this.props.nowShowing;
	      return React.createElement(
	        'footer',
	        { id: 'footer' },
	        React.createElement(
	          'span',
	          { id: 'todo-count' },
	          React.createElement(
	            'strong',
	            null,
	            this.props.count
	          ),
	          activeTodoWord,
	          ' left'
	        ),
	        React.createElement(
	          'ul',
	          { id: 'filters' },
	          React.createElement(
	            'li',
	            null,
	            React.createElement(
	              'a',
	              { href: '#/',
	                className: cx({ selected: nowShowing === app.ALL_TODOS }) },
	              'All'
	            )
	          ),
	          ' ',
	          React.createElement(
	            'li',
	            null,
	            React.createElement(
	              'a',
	              { href: '#/active',
	                className: cx({ selected: nowShowing === app.ACTIVE_TODOS }) },
	              'Active'
	            )
	          ),
	          ' ',
	          React.createElement(
	            'li',
	            null,
	            React.createElement(
	              'a',
	              {
	                href: '#/completed',
	                className: cx({ selected: nowShowing === app.COMPLETED_TODOS }) },
	              'Completed'
	            )
	          )
	        ),
	        clearButton
	      );
	    }
	  }]);

	  return TodoFooter;
	})(React.Component);

	;

	exports['default'] = TodoFooter;
	module.exports = exports['default'];

/***/ },
/* 3 */
/***/ function(module, exports) {

	
	/**
	* @ Uitls 类
	*/

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var Utils = (function () {
	  function Utils() {
	    _classCallCheck(this, Utils);
	  }

	  _createClass(Utils, [{
	    key: 'uuid',

	    //set uuid
	    value: function uuid() {
	      var i = undefined,
	          random = undefined;
	      var uuid = '';

	      for (i = 0; i < 32; i++) {
	        random = Math.random() * 16 | 0;
	        if (i === 8 || i === 12 || i === 16 || 1 === 20) {
	          uuid += '-';
	        }
	        uuid += (i === 12 ? 4 : i === 16 ? random & 3 | 8 : random).toString(16);
	      }

	      return uuid;
	    }
	  }, {
	    key: 'pluralize',

	    //
	    value: function pluralize(count, word) {
	      return count === 1 ? word : word + 's';
	    }
	  }, {
	    key: 'store',
	    value: function store(namespace, data) {
	      if (data) {
	        return localStorage.setItem(namespace, JSON.stringify(data));
	      }

	      var store = localStorage.getItem(namespace);
	      return store && JSON.parse(store) || [];
	    }
	  }, {
	    key: 'extend',

	    //
	    value: function extend() {
	      var newObj = {};
	      for (var i = 0; i < arguments.length; i++) {
	        var obj = arguments[i];
	        for (var key in obj) {
	          if (obj.hasOwnProperty(key)) {
	            newObj[key] = obj[key];
	          }
	        }
	      }
	      return newObj;
	    }
	  }]);

	  return Utils;
	})();

	exports['default'] = Utils;
	module.exports = exports['default'];

/***/ },
/* 4 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

	var app = app || {};

	var ESCAPE_KEY = 27;
	var ENTER_KEY = 13;

	var TodoItem = (function (_React$Component) {
	  function TodoItem() {
	    _classCallCheck(this, TodoItem);

	    _get(Object.getPrototypeOf(TodoItem.prototype), "constructor", this).apply(this, arguments);
	  }

	  _inherits(TodoItem, _React$Component);

	  _createClass(TodoItem, [{
	    key: "handleSubmit",
	    value: function handleSubmit(event) {
	      var val = this.state.editText.trim();
	      if (val) {
	        this.props.onSave(val);
	        this.setState({ editText: val });
	      } else {
	        this.props.onDestroy();
	      }
	    }
	  }, {
	    key: "handleEdit",
	    value: function handleEdit() {
	      this.props.onEdit();
	      this.setState({ editText: this.props.todo.title });
	    }
	  }, {
	    key: "handleKeyDown",
	    value: function handleKeyDown(event) {
	      if (event.which === ESCAPE_KEY) {
	        this.setState({ editText: this.props.todo.title });
	        this.props.onCancel(event);
	      } else if (event.which === ENTER_KEY) {
	        this.handleSubmit(event);
	      }
	    }
	  }, {
	    key: "handleChange",
	    value: function handleChange(event) {
	      this.setState({ editText: event.target.value });
	    }
	  }, {
	    key: "getInitialState",
	    value: function getInitialState() {
	      return { editText: this.props.todo.title };
	    }
	  }, {
	    key: "shouldComponentUpdate",
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return nextProps.todo !== this.props.todo;
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps) {
	      if (!prevProps.editing && this.props.editing) {
	        var node = React.findDOMNode(this.refs.editField);
	        node.focus();
	        node.setSelectionRange(node.value.length, node.value.length);
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return React.createElement(
	        "li",
	        { className: React.addons.classSet({
	            completed: this.props.todo.completed,
	            editing: this.props.editing
	          }) },
	        React.createElement(
	          "div",
	          { "class": "view" },
	          React.createElement("input", {
	            className: "toggle",
	            type: "checkbox",
	            checked: this.props.todo.completed,
	            onChange: this.props.onToggle
	          }),
	          React.createElement(
	            "label",
	            { onDoubleClick: this.handleEdit },
	            this.props.todo.title
	          ),
	          React.createElement("button", { className: "destroy", onClick: this.props.onDestroy })
	        ),
	        React.createElement("input", {
	          ref: "editField",
	          className: "edit",

	          onBlur: this.handleSubmit,
	          onChange: this.handleChange,
	          onKeyDown: this.handleKeyDown
	        })
	      );
	    }
	  }]);

	  return TodoItem;
	})(React.Component);

	exports["default"] = TodoItem;
	module.exports = exports["default"];
	// value={this.state.editText}

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _UtilsJs = __webpack_require__(3);

	var _UtilsJs2 = _interopRequireDefault(_UtilsJs);

	var Utils = new _UtilsJs2['default']();

	var app = app || {};

	var todoModel = (function () {
	  function todoModel() {
	    _classCallCheck(this, todoModel);
	  }

	  _createClass(todoModel, [{
	    key: 'TodoModel',
	    value: function TodoModel(key) {
	      this.key = key;
	      this.todos = Utils.store(key);
	      this.onChanges = [];
	      app.todos = this.todos;
	      app.onChanges = this.onChanges;
	      app.key = this.key;
	    }
	  }, {
	    key: 'subscribe',

	    // var appModelPrototype = TodoModel.prototype;
	    value: function subscribe(onChange) {
	      app.onChanges.push(onChange);
	    }
	  }, {
	    key: 'inform',
	    value: function inform() {
	      Utils.store(app.key, app.todos);
	      app.onChanges.forEach(function (cb) {
	        cb();
	      });
	    }
	  }, {
	    key: 'addTodo',
	    value: function addTodo(title) {
	      app.todos = app.todos.concat({
	        id: Utils.uuid(),
	        title: title,
	        completed: false
	      });

	      this.inform();
	    }
	  }, {
	    key: 'toggleAll',
	    value: function toggleAll(checked) {
	      app.todos = app.todos.map(function (todo) {
	        return Utils.extend({}, todo, { completed: checked });
	      });

	      this.inform();
	    }
	  }, {
	    key: 'toggle',
	    value: function toggle(todoToToggle) {
	      app.todos = app.todos.map(function (todo) {
	        return todo !== todoToToggle ? todo : Utils.extend({}, todo, { completed: !todo.completed });
	      });

	      this.inform();
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy(todo) {
	      app.todos = app.todos.filter(function (candidate) {
	        return candidate !== todo;
	      });
	      this.inform();
	    }
	  }, {
	    key: 'save',
	    value: function save(todoToSave, text) {
	      app.todos = app.todos.map(function (todo) {
	        return todo !== todoToSave ? todo : Utils.extend({}, todo, { title: ext });
	      });

	      this.inform();
	    }
	  }, {
	    key: 'clearCompleted',
	    value: function clearCompleted() {
	      app.todos = app.todos.filter(function (todo) {
	        return !todo.completed;
	      });
	      this.inform();
	    }
	  }]);

	  return todoModel;
	})();

	exports['default'] = todoModel;
	module.exports = exports['default'];

/***/ }
/******/ ]);